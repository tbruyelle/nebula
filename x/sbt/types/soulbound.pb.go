// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sbt/soulbound.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SoulBound struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Id      uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	SoulID  uint64 `protobuf:"varint,4,opt,name=soulID,proto3" json:"soulID,omitempty"`
	BoundAt int64  `protobuf:"varint,5,opt,name=boundAt,proto3" json:"boundAt,omitempty"`
}

func (m *SoulBound) Reset()         { *m = SoulBound{} }
func (m *SoulBound) String() string { return proto.CompactTextString(m) }
func (*SoulBound) ProtoMessage()    {}
func (*SoulBound) Descriptor() ([]byte, []int) {
	return fileDescriptor_79500e42d3d80d70, []int{0}
}
func (m *SoulBound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoulBound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoulBound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoulBound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoulBound.Merge(m, src)
}
func (m *SoulBound) XXX_Size() int {
	return m.Size()
}
func (m *SoulBound) XXX_DiscardUnknown() {
	xxx_messageInfo_SoulBound.DiscardUnknown(m)
}

var xxx_messageInfo_SoulBound proto.InternalMessageInfo

func (m *SoulBound) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SoulBound) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *SoulBound) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SoulBound) GetSoulID() uint64 {
	if m != nil {
		return m.SoulID
	}
	return 0
}

func (m *SoulBound) GetBoundAt() int64 {
	if m != nil {
		return m.BoundAt
	}
	return 0
}

func init() {
	proto.RegisterType((*SoulBound)(nil), "tbruyelle.nebula.sbt.SoulBound")
}

func init() { proto.RegisterFile("sbt/soulbound.proto", fileDescriptor_79500e42d3d80d70) }

var fileDescriptor_79500e42d3d80d70 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4e, 0x2a, 0xd1,
	0x2f, 0xce, 0x2f, 0xcd, 0x49, 0xca, 0x2f, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x29, 0x49, 0x2a, 0x2a, 0xad, 0x4c, 0xcd, 0xc9, 0x49, 0xd5, 0xcb, 0x4b, 0x4d, 0x2a, 0xcd,
	0x49, 0xd4, 0x2b, 0x4e, 0x2a, 0x51, 0xaa, 0xe5, 0xe2, 0x0c, 0xce, 0x2f, 0xcd, 0x71, 0x02, 0x29,
	0x14, 0x92, 0xe0, 0x62, 0x4f, 0x2e, 0x4a, 0x4d, 0x2c, 0xc9, 0x2f, 0x92, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x82, 0x71, 0x85, 0x44, 0xb8, 0x58, 0xf3, 0xcb, 0xf3, 0x52, 0x8b, 0x24, 0x98, 0xc0,
	0xe2, 0x10, 0x8e, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x4b, 0x10,
	0x53, 0x66, 0x8a, 0x90, 0x18, 0x17, 0x1b, 0xc8, 0x56, 0x4f, 0x17, 0x09, 0x16, 0xb0, 0x18, 0x94,
	0x07, 0x32, 0x17, 0xec, 0x12, 0xc7, 0x12, 0x09, 0x56, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x18, 0xd7,
	0xc9, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0,
	0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xd4, 0xd3, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xe1, 0x2e, 0xd7, 0x87, 0xb8, 0x5c, 0xbf, 0x42,
	0x1f, 0xe4, 0xc3, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xf7, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0xf4, 0x71, 0x58, 0xf5, 0x00, 0x00, 0x00,
}

func (m *SoulBound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoulBound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoulBound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoundAt != 0 {
		i = encodeVarintSoulbound(dAtA, i, uint64(m.BoundAt))
		i--
		dAtA[i] = 0x28
	}
	if m.SoulID != 0 {
		i = encodeVarintSoulbound(dAtA, i, uint64(m.SoulID))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintSoulbound(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSoulbound(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSoulbound(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSoulbound(dAtA []byte, offset int, v uint64) int {
	offset -= sovSoulbound(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SoulBound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSoulbound(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSoulbound(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSoulbound(uint64(m.Id))
	}
	if m.SoulID != 0 {
		n += 1 + sovSoulbound(uint64(m.SoulID))
	}
	if m.BoundAt != 0 {
		n += 1 + sovSoulbound(uint64(m.BoundAt))
	}
	return n
}

func sovSoulbound(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSoulbound(x uint64) (n int) {
	return sovSoulbound(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SoulBound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSoulbound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoulBound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoulBound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoulbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSoulbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoulbound
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSoulbound
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoulID", wireType)
			}
			m.SoulID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoulID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundAt", wireType)
			}
			m.BoundAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoundAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSoulbound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSoulbound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSoulbound(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSoulbound
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSoulbound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSoulbound
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSoulbound
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSoulbound
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSoulbound        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSoulbound          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSoulbound = fmt.Errorf("proto: unexpected end of group")
)
